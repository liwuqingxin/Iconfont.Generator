<Window x:Class="Nlnet.Sharp.MainWindow"
        xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:iconA="clr-namespace:Nlnet.Sharp.IconA;assembly=Nlnet.Sharp.Magic.App.Iconfont"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:nlnet="https://www.nlnet.net"
        xmlns:sharp="clr-namespace:Nlnet.Sharp"
        Title="{Binding Source={x:Static sharp:AssemblyVersionProvider.Version}, StringFormat=Nlnet Sharp Iconfont Generator | v{0}}"
        Width="800"
        Height="500"
        Icon="Assets/Magic.ico"
        WindowStartupLocation="CenterScreen"
        mc:Ignorable="d">

    <Window.Styles>
        <Style Selector="TextBlock">
            <Setter Property="TextWrapping" Value="Wrap" />
        </Style>
        <Style Selector="IconBlock">
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="FontSize" Value="48" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Transitions">
                <Transitions>
                    <TransformOperationsTransition Easing="0.5,0.8,0.5,0.8"
                                                   Property="RenderTransform"
                                                   Duration="0:0:0.2" />
                </Transitions>
            </Setter>
            <Style Selector="^:pointerover">
                <Setter Property="RenderTransform" Value="scale(1.4,1.4)" />
                <Setter Property="ZIndex" Value="100" />
            </Style>
        </Style>
    </Window.Styles>

    <TabControl Padding="30" TabStripPlacement="Left">
        <TabItem Header="About">
            <StackPanel Spacing="20">
                <Image Width="200" Source="Assets/Magic.Clean.png" HorizontalAlignment="Left"/>
                <TextBlock TextWrapping="Wrap">
                    <Run>We provide a magic ability to generate icon classes from iconfont.json which comes from</Run>
                    <Run Foreground="Blue">https://www.iconfont.cn/</Run>
                    .<LineBreak />
                    <LineBreak />
                    <Run>You can use it in avalonia (and wpf in later versions), in kinds of approaches.</Run>
                </TextBlock>
            </StackPanel>
        </TabItem>

        <TabItem Header="First of all">
            <StackPanel>
                <TextBlock TextWrapping="Wrap">
                    <Run>1. You need two files, like</Run>
                    <Run Foreground="Blue">*.json</Run>
                    and<Run Foreground="Blue">*.ttf</Run>
                    .<LineBreak />
                    <LineBreak />
                    <Run>2. Add the package 'Nlnet.Sharp.Iconfont.Generator' from Nuget.</Run>
                    <LineBreak />
                    <LineBreak />
                    <Run>3. Standalone project for iconfont resources.</Run>
                    <LineBreak />
                    <LineBreak />
                    <Run>4. Add the *.json as AdditionalFiles and give it a 'IconName' property.</Run>
                    <LineBreak />
                    <LineBreak />
                    <Run>That's all. Just build it.</Run>
                </TextBlock>
            </StackPanel>
        </TabItem>

        <TabItem Header="Build-Info">
            <ScrollViewer>
                <StackPanel Spacing="3">
                    <TextBlock Text="IconA" />
                    <TextBlock Text="{Binding Source={x:Static iconA:IconAInfo.Id}, StringFormat='Id:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static iconA:IconAInfo.Name}, StringFormat='Name:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static iconA:IconAInfo.FontFamily}, StringFormat='FontFamily:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static iconA:IconAInfo.Count}, StringFormat='Count:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static iconA:IconAInfo.Description}, StringFormat='Description:   {0}'}" />

                    <TextBlock Text=" " />

                    <TextBlock Text="IconB" />
                    <TextBlock Text="{Binding Source={x:Static IconBInfo.Id}, StringFormat='Id:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconBInfo.Name}, StringFormat='Name:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconBInfo.FontFamily}, StringFormat='FontFamily:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconBInfo.Count}, StringFormat='Count:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconBInfo.Description}, StringFormat='Description:   {0}'}" />

                    <TextBlock Text=" " />

                    <TextBlock Text="IconC" />
                    <TextBlock Text="{Binding Source={x:Static IconCInfo.Id}, StringFormat='Id:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconCInfo.Name}, StringFormat='Name:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconCInfo.FontFamily}, StringFormat='FontFamily:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconCInfo.Count}, StringFormat='Count:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconCInfo.Description}, StringFormat='Description:   {0}'}" />

                    <TextBlock Text=" " />

                    <TextBlock Text="IconD" />
                    <TextBlock Text="{Binding Source={x:Static IconDInfo.Id}, StringFormat='Id:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconDInfo.Name}, StringFormat='Name:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconDInfo.FontFamily}, StringFormat='FontFamily:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconDInfo.Count}, StringFormat='Count:   {0}'}" />
                    <TextBlock Text="{Binding Source={x:Static IconDInfo.Description}, StringFormat='Description:   {0}'}" />
                </StackPanel>
            </ScrollViewer>
        </TabItem>

        <TabItem Header="Using Chars">
            <StackPanel Spacing="20">
                <TextBlock Text="Without FontFamily being set." />
                <IconBlock Text="{x:Static iconA:IconAChars.Night}" />

                <TextBlock Text="With FontFamily being set from resources." />
                <IconBlock FontFamily="{DynamicResource IconAFamily}" Text="{x:Static iconA:IconAChars.Hand}" />

                <TextBlock Text="With FontFamily being set by SharpIconFamily." />
                <IconBlock FontFamily="{SharpIconFamily IconA}" Text="{x:Static iconA:IconAChars.Day}" />
            </StackPanel>
        </TabItem>

        <TabItem Header="Using Markup">
            <StackPanel Spacing="20">
                <TextBlock Text="With IconA markup extension." />
                <IconBlock FontFamily="{SharpIconFamily IconA}" Text="{iconA:IconA IsPinned}" />
            </StackPanel>
        </TabItem>

        <TabItem Header="Save Xmlns">
            <StackPanel Spacing="20">
                <TextBlock Text="Save the xmlns by setting property 'UseDefaultXmlnsPrefix' to true." />
                <IconBlock FontFamily="{SharpIconFamily IconB}" Text="{IconB AlignTop}" />
            </StackPanel>
        </TabItem>

        <TabItem Header="Save FontFamily">
            <StackPanel Spacing="20">
                <TextBlock Text="Save the FontFamily in Xaml by setting MSBuild property 'AutoSetFontFamily' to true. Note that the FontFamily will be forced to set by default." />
                <IconBlock Text="{IconD 芝士蛋糕}" />

                <TextBlock Text="Save the FontFamily in Xaml by setting property 'AutoSetFontFamily' to true. Note that the FontFamily will be forced to set." />
                <IconBlock Text="{IconB AlignBottom, AutoSetFontFamily=True}" />

                <!-- If the iconfont is built with MSBuild property 'InjectFallbackFont', FontFamily property can be saved. -->
                <!-- Please note that only one iconfont can be built with 'InjectFallbackFont'. -->
                <TextBlock Text="Save the FontFamily globally by setting MSBuild property 'InjectFallbackFont' to true. Note that the FontFamily will be injected into FontManager as fallback FontFamily. Only one iconfont can be built with 'InjectFallbackFont'." />
                <IconBlock Text="{IconC GitHub}" />
            </StackPanel>
        </TabItem>

        <TabItem Header="Icon and Text">
            <ScrollViewer>
                <StackPanel Spacing="20">
                    <StackPanel.Styles>
                        <Style Selector="IconBlock">
                            <Setter Property="FontSize" Value="18" />
                        </Style>
                    </StackPanel.Styles>
                    <TextBlock>
                        <Run Text="Use an icon in a text. Note that the FontFamily must be the icon's." />
                        <Run Text="You can use the FontManagerOptions to control the text's FontFamily." />
                        <Run Text="Note that the last line is clipped. It is not recommended to use it." />
                    </TextBlock>
                    <IconBlock Text="{IconD 彩椒, Prefix='The icon is', Suffix='and it is also named 彩椒.'}" />
                    <IconBlock Text="{IconD 咖啡, Suffix='This is Coffee (咖啡).'}" />
                    <IconBlock Text="{IconD 布丁, Suffix='This is Pudding (布丁).'}" />
                    <IconBlock Text="{IconD 树莓, Suffix='This is Raspberry (树莓).'}" />

                    <TextBlock Text="Use Run to combine icons and texts. In this way, FontFamily of icons and texts does not interact each other." />
                    <Border BorderBrush="Red" BorderThickness="1">
                        <IconBlock>
                            <Run FontSize="24" Text="{IconD 奥利奥}" />
                            <Run Text="This is Oreo (奥利奥)." />
                            <Run FontSize="48" Text="{IconD 树莓}" />
                            <Run Text="This is Raspberry (树莓)." />
                        </IconBlock>
                    </Border>
                    
                    <TextBlock Text="Also we can have more controls on them, like 'BaselineAlignment'." />
                    <Border BorderBrush="Red" BorderThickness="1">
                        <IconBlock>
                            <Run BaselineAlignment="Center"
                                 FontSize="24"
                                 Text="{IconD 奥利奥}" />
                            <Run BaselineAlignment="Center" Text="This is Oreo (奥利奥)." />
                            <Run BaselineAlignment="Baseline"
                                 FontSize="48"
                                 Text="{IconD 树莓}" />
                            <Run BaselineAlignment="Center" Text="This is Raspberry (树莓)." />
                        </IconBlock>
                    </Border>
                    <Border BorderBrush="Red" BorderThickness="1">
                        <IconBlock>
                            <Run BaselineAlignment="Center" Text="{IconD 奥利奥}" />
                            <Run BaselineAlignment="Center" Text="This is Oreo (奥利奥)." />
                            <Run BaselineAlignment="Baseline" Text="{IconD 树莓}" />
                            <Run BaselineAlignment="Center" Text="This is Raspberry (树莓)." />
                        </IconBlock>
                    </Border>
                    <Border BorderBrush="Red" BorderThickness="1">
                        <IconBlock FontSize="12">
                            <Run Text="{IconD 橙子}" />
                            <Run Text="This is Raspberry (树莓)." />
                        </IconBlock>
                    </Border>
                    
                    <TextBlock Text="If you use Nlnet.Sharp.Magic.Icon package in nuget, you can use 'IconTextBlock' which has a Icon property." />
                    <Border BorderBrush="Red" BorderThickness="1">
                        <nlnet:IconTextBlock Icon="{IconD 橙子}"
                                             Text="This is Raspberry g (树莓)."
                                             ToolTip.Tip="{Binding $self.FontFamily}" />
                    </Border>
                    
                    <TextBlock>
                        <Run Text="The IconXxxExtension will auto set FontFamily if AutoSetFontFamily is true." />
                        <Run Text="We can make that happened on the Run of icon but the whole control by set MSBuild property 'ConsiderIIconVisualWhenAutoSetFontFamily' to true in IconTextBlock." />
                    </TextBlock>
                    <Border BorderBrush="Red" BorderThickness="1">
                        <nlnet:IconTextBlock Icon="{IconE 橙子}"
                                             Text="This is Raspberry g (树莓)."
                                             ToolTip.Tip="{Binding $self.FontFamily}" />
                    </Border>
                </StackPanel>
            </ScrollViewer>
        </TabItem>

        <TabItem Header="Icon Viewer">
            <Button Height="32"
                    HorizontalAlignment="Center"
                    Click="Button_OnClick"
                    Content="Show Icon Viewer" />
        </TabItem>
    </TabControl>
</Window>
